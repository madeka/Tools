/fries/				->	true if fries is in string (case sensible)
/fries/i			->	(case insensible)
/fries|potatoes/	->	matches fries or potatoes
/^Hello/			->	matches hello at the beginning of a string
/goodbye$/			->	matches goodbye at the end of a string
/h[ia]s/			->	matches his or has
/[a-z]/				->	letter between a and z
/[A-Z]/				->	letter between A and Z
/[0-9]/				->	digit between 0 and 9
/[^0-9]/			->	Not a digit
/a?/				->	0 or 1 a
/a+/				->	1 or many a
/a*/				->	0 or many a
/ay(yo)*/			->	1 ay + 0 or many yo
/ay(yo|ay)*/		->	1 ay + 0 or many yo or ay (exemple : ayayyoay)
/a{3}/				->	3 a (aaa)
/a{3,}/				->	3 or more a
/a{3,5}/			->	between 3 and 5 a
/what \?/			->	escape ? or (# ! ^ $ ( ) [ ] { } ? + * . \ |)
/[a-z?+*{}]/		->	between [] metacharacters escape (no need for \)
/\d/				->	digit ([0-9])
/\D/				->	Not digit ([^0-9])
/\w/				->	alphanumeric character or underscore [a-zA-Z0-9_]
/\W/				->	not a word [^a-zA-Z0-9_]
/\t/				->	tabulation
/\n/				->	newline
/\r/				->	carriage return
/\s/				->	Whitespace
/\S/				->	not a whitespace
/./					->	any character (exept \n)
/\d+(?= dollars)/	->	Exemple : "100 dollars" -> matches 100
						\d+ matches the digits 100, then the lookahead (?= dollars)
						asserts that at that position in the string, what immediately follows is the characters
						" dollars"
/(?=\d+ dollars)\d+/	->	The lookahead (?=\d+ dollars) asserts that at the current position in the string,
							what follows is digits then the characters " dollars". If the assertion succeeds,
							the engine matches the digits with \d+
